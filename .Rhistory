MARGIN = ifelse(taxa_are_rows(ps0), yes = 1, no = 2),
FUN    = function(x){sum(x > 0)})
# add taxonomy and total read counts to this data.frame
prev_df <- data.frame(Prevalence     = prev_df,
RPKMTotal = taxa_sums(ps0),
tax_table(ps0))
# calculate total and average prevalences of features in each AMR class
plyr::ddply(prev_df, "ta7", function(df1){
cbind(mean(df1$Prevalence), sum(df1$Prevalence))})
# plot prevalence by read count | prevalence filtering
ggplot(prevdf, aes(RPKMTotal, Prevalence / nsamples(ps0), color = "ta7")) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 2, alpha = 0.7) +
scale_x_log10() + xlab("RPKM Total") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ta7) + theme(legend.position="none")
ggplot(prev_df, aes(RPKMTotal, Prevalence / nsamples(ps0), color = "ta7")) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 2, alpha = 0.7) +
scale_x_log10() + xlab("RPKM Total") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ta7) + theme(legend.position="none")
ggplot(prev_df, aes(RPKMTotal, Prevalence / nsamples(ps0), color = "ta7")) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 2, alpha = 0.7) +
scale_x_log10() + xlab("RPKM Total") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ta7) + theme(legend.position="none") + scale_colour_viridis_d()
ggplot(prev_df, aes(RPKMTotal, Prevalence / nsamples(ps0), color = "ta7")) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 5, alpha = 0.7) +
scale_x_log10() + xlab("RPKM Total") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ta7) + theme(legend.position="none") + scale_colour_viridis_d()
ggplot(prev_df, aes(RPKMTotal, Prevalence / nsamples(ps0), color = "ta7")) +
geom_hline(yintercept = 0.05, alpha = 0.5, linetype = 2) +
geom_point(size = 4, alpha = 0.7) +
scale_x_log10() + xlab("RPKM Total") + ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ta7) + theme(legend.position="none") + scale_colour_viridis_d()
table(tax_table(physeq)[,"ta7"], exclude = NULL)
# show number of features for each AMRgene category, ta6= CLASS
table(tax_table(physeq)[,"ta6"], exclude = NULL)
# show number of features for each AMRgene category, ta6= CLASS
table(tax_table(physeq)[,"ta6"], exclude = NULL)
physeq %>% filter(ta6 == "BETA-LACTAM") %>% table(tax_table()[,"ta7"], exclude = NULL)
subset_taxa(physeq) %>% filter(ta6 == "BETA-LACTAM") %>% table(tax_table()[,"ta7"], exclude = NULL)
table(tax_table(physeq)[,"ta7"], exclude = NULL)
View(u_all)
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKM")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
# Abundance value transformation
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
# Abundance value transformation
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKM")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKM")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
scale_y_log10() + theme(legend.position="none")
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKMTotal")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
# Abundance value transformation  - Not Working
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6")
plot_abundance(psOrd, Facet = "ta7", Color = NULL)
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKMTotal")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
plot_abundance(psOrd, Facet = "ta7", Color = NULL)
# Abundance value transformation  - Not Working
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="RPKM")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
plot_abundance(psOrd, Facet = "ta7", Color = NULL)
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
mphyseq
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="Abundance")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
plot_abundance(psOrd, Facet = "ta7", Color = NULL)
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="Abundance")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none") +
scale_colour_viridis_d()
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
plot_abundance(psOrd, Facet = "ta7", Color = NULL)
psmelt(physeq)
physeq
tax_table(physeq)
sample_data(physeq)
plot_abundance(psOrd, Facet = "ta7", Color = "Group")
# Abundance value transformation  - Not Working
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="Abundance")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none") +
scale_colour_viridis_d()
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
plot_abundance(psOrd, Facet = "ta7", Color = "Group")
plot_abundance(psOrd, Facet = "ta7", Color = "Group") +
scale_colour_viridis_d()
plot_abundance(psOrd, Facet = "ta7", Color = "Group") +
scale_colour_viridis_d()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pheatmap)
library(viridis)
library(MEP)
theme_set(theme_bw())
plot_abundance <- function(physeq, title= "", Facet = "ta7", Color = "ta6"){
p1f            <- subset_taxa(physeq, ta6 %in% c("BETA-LACTAM"))
mphyseq        <- psmelt(p1f)
ggplot(data=mphyseq, mapping = aes_string(x= "Group", y="Log 10 RPKM")) +
geom_violin(fill = NA) +
geom_point(size = 1, alpha = 0.3, position = position_jitter(width=0.3)) +
facet_wrap(facets = Facet) + scale_y_log10() + theme(legend.position="none")
}
psOrd = subset_taxa(ps0, ta6 %in% c("BETA-LACTAM"))
library(phyloseq)
# load AMR RPKMs as phyloseq OTU table
OTU <- otu_table(as.matrix(RPKM_sm), taxa_are_rows = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pheatmap)
library(viridis)
library(MEP)
theme_set(theme_bw())
# store paths
AMR_path  <- "~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/AMRFinder/00_filtered"
bm_path   <- "~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/AMRFinder/01_summarized_PACE/binary_matrix.tsv"
RPKM_path <- "~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/AMRFinder/01_summarized_PACE/RPKM_matrix.tsv"
ss_path   <- "~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/AMRFinder/Metagenomes/Screening/screening_summary.tsv"
metadata_path <- "/Users/NewNasty/Box/MEP/Projects/PREMIX/Analyses/Data/20.04.27 - PREMIX metabolomics metadata.xlsx"
# import tsvs
binarymatrix <- read_delim(bm_path, "\t", escape_double = FALSE, trim_ws = TRUE)
RPKM_matrix <- read_delim(RPKM_path, "\t", escape_double = FALSE, trim_ws = TRUE)
screening_summary <- read_delim(ss_path, "\t", escape_double = FALSE, trim_ws = TRUE)
# add matrix rownames for pheatmap
binarymatrix_m <- binarymatrix %>% select(-X1)
rownames(binarymatrix_m) <- binarymatrix$X1
RPKM_m <- RPKM_matrix %>% select(-X1)
rownames(RPKM_m) <- RPKM_matrix$X1
# get sample prefixes - sample_prefixes
sample_prefixes <- get_prefix(colnames(RPKM_m), sep="-", HMP=TRUE)
# sample prefixes without SD-01 - no_sd
no_sd <- c(sample_prefixes[1:6], sample_prefixes[8])
# get just screening & SRS sample prefixes - name_list
screen_HMP_prefixes <- NULL
for(name in colnames(RPKM_m)){
if(str_detect(name, "S")){
screen_HMP_prefixes[length(screen_HMP_prefixes)+1] <- name}}
screen_HMP_prefixes <- screen_HMP_prefixes[-9]
print(screen_HMP_prefixes)
# get just screening & HMP sample_prefixes
RPKM_sm <- RPKM_m %>%
select(starts_with(screen_HMP_prefixes))
rownames(RPKM_sm) <- rownames(RPKM_m)
# pull class, subclass data for unique AMRFinder genes
all_files <- ""
file.names <- dir(AMR_path, pattern=".tsv")
for(i in 1:length(file.names)){
file <- read.delim(paste(AMR_path, file.names[i], sep="/"),
header=FALSE,
sep="\t")
all_files <- rbind(all_files, file)
}
# rename columns for summary table
all_files <- all_files[-1,] %>%
rename("Protein.ID" = V1,
"Gene.symbol" = V2,
"Sequence.name" = V3,
"Scope" = V4,
"Element.type" = V5,
"Element.subtype" = V6,
"Class" = V7,
"Subclass" = V8,
"Method" = V9,
"Target.length" = V10,
"Reference.sequence.length" = V11,
"PCT.reference.coverage" = V12,
"PCT.reference.identity" = V13,
"Alignment.length" = V14,
"Accession.of.closest.sequence" = V15,
"Name.of.closest.sequence" = V16,
"HMM.id" =V17,
"HMM.description" = V18)
# filter unique gene metadata for set:
u_all <- all_files %>%
select(Gene.symbol, Sequence.name, Scope, Element.type,
Element.subtype, Class, Subclass) %>%
unique() %>%
select(Sequence.name, everything())
# pivot_longer, without log-transformation
RPKM_mL <- RPKM_m %>%
rownames_to_column(var="Gene.name") %>%
pivot_longer(cols = c(-Gene.name),
names_to="Sample",
values_to="RPKM")
# pivot_longer, log-transformed
RPKM_ml <- log(RPKM_m +1) %>%
rownames_to_column(var="Gene.name") %>%
pivot_longer(cols = c(-Gene.name),
names_to="Sample",
values_to="RPKM")
# make list of visit names for reordering
# Pheatmap annotation dataframes
# Screening Row annotations
Resistance.class              <- u_all$Class
# Subclass                    <- u_all$Subclass
amr_rowannotations            <- data.frame(Resistance.class)
rownames(amr_rowannotations)  <- u_all$Sequence.name
# Import sample metadata (same as phyloseq)
sample_metadata <- read_delim("~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/Metadata/20.09.07 - Screening Resistome metadata.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
rownames(sample_metadata) <- sample_metadata$ID
# Sample Column annotations
# ESBL <- c("Positive", "Positive", "Positive",
#         "Positive", "Positive", "Positive",
#         "Positive", "Positive",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA")
# VRE <- c("Positive", "Negative", "Positive",
#          "Negative", "Positive", "Negative",
#          "Positive", "Negative",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA")
# CRE <- c("Positive", "Negative", "Positive",
#          "Negative", "Negative", "Negative",
#          "Positive", "Negative",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA",
#         "NA", "NA", "NA", "NA", "NA", "NA")
ESBL <- c("Positive", "Positive", "Positive",
"Positive", "Positive", "Positive",
"Positive", "Positive",
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA)
VRE <- c("Positive", "Negative", "Positive",
"Negative", "Positive", "Negative",
"Positive", "Negative",
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA)
CRE <- c("Positive", "Negative", "Positive",
"Negative", "Negative", "Negative",
"Positive", "Negative",
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA)
MDRO.culture <- data.frame(ESBL,VRE,CRE)
rownames(MDRO.culture) <- screen_HMP_prefixes
# Specify Pheatmap AMR class color
class_colors <- list(
Resistance.class = c(
AMINOGLYCOSIDE="#a6b148",
`AMINOGLYCOSIDE/QUINOLONE`="#5f8dd0",
`BETA-LACTAM`="#bc6de3",
EFFLUX="#c9479d",
FOSFOMYCIN="#d74164",
GLYCOPEPTIDE="#d99c39",
LINCOSAMIDE="#4fb694",
`LINCOSAMIDE/STREPTOGRAMIN`="#2c9295",
MACROLIDE="#cc5b38",
`MACROLIDE/LINCOSAMIDE/STREPTOGRAMIN`="#5969d7",
NITROIMIDAZOLE="#5480b9",
PHENICOL="#8e44ab",
`PHENICOL/QUINOLONE`="#597b38",
PLEUROMUTILIN="#5db850",
QUINOLONE="#a77b41",
RIFAMYCIN="#aa90e1",
STREPTOGRAMIN="#824029",
STREPTOTHRICIN="#4cb5dd",
SULFONAMIDE="#b65e6d",
TETRACYCLINE="#6a5c9e",
TRIMETHOPRIM="#d582b9"),
CRE = c(Positive="#F98400",
Negative="#5BBCD6",
"NA"="#DCDCDC"),
VRE = c(Positive="#F98400",
Negative="#5BBCD6",
"NA"="#DCDCDC"),
ESBL = c(Positive="#F98400",
Negative="#5BBCD6",
"NA"="#DCDCDC")
)
library(phyloseq)
# load AMR RPKMs as phyloseq OTU table
OTU <- otu_table(as.matrix(RPKM_sm), taxa_are_rows = TRUE)
# add AMR gene names as taxa names
TAX <- tax_table(u_all)
taxa_names(TAX) <- u_all$Sequence.name
# import sample metadata, add rownames
sample_metadata <- read_delim("~/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/Metadata/20.09.07 - Screening Resistome metadata.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
rownames(sample_metadata) <- sample_metadata$ID
SAM <- sample_data(sample_metadata)
sample_names(SAM) <- sample_metadata$ID
physeq <- phyloseq(OTU, TAX, SAM)
physeq
# plot (view TAX variables, imported as ta* rather than class name)
plot_bar(physeq, fill = "ta6") + theme_classic()
# distance - tutorial (https://joey711.github.io/phyloseq/distance.html)
# make list of distance metrics in phyloseq for loop
dist_methods <- unlist(distanceMethodList)
dist_methods <- dist_methods[-(1:3)] # remove metrics requiring tree
dist_methods <- dist_methods[-which(dist_methods=="ANY")] # remove user-defined distance
# loop through selected distance metrics, create list of plots "plist"
plist <- vector("list", length(dist_methods))
for( method in dist_methods){
# calculate distance
method_distance <- distance(physeq, method = method)
# calculate ordination
method_MDS <- ordinate(physeq, "MDS", distance = method_distance)
## Plot
# initialize / clear plot from last loop
p <- NULL
p <- plot_ordination(physeq, method_MDS, color="Group")
p <- p + ggtitle(paste("MDS using ", method, " distance method", sep="")) +
scale_colour_viridis_d() +
geom_point(size=5)
plist[[method]] <- p
}
# shade by sample category ( Screen / HMP )
df <- plyr::ldply(plist, function(x) x$data)
names(df)[1] <- "distance"
p <- ggplot(df, aes(Axis.1, Axis.2, color=Group))
p <- p + geom_point(size=3, alpha=0.5) +
facet_wrap(~distance, scales="free") +
ggtitle("MDS on various distance metrics for Screening vs HMP data") +
scale_colour_viridis_d()
p
# print single plot
print(plist[["jaccard"]])
########################## CLEAREST SO FAR
print(plist[["bray"]])
# plot (view TAX variables, imported as ta* rather than class name)
plot_bar(physeq, fill = "ta6") + theme_classic() + scale_y_log10()
plot_bar(physeq, fill = "ta6") + theme_classic() + scale_y_log()
# plot (view TAX variables, imported as ta* rather than class name)
plot_bar(physeq, fill = "ta6") + theme_classic() + scale_y_log10()
# plot (view TAX variables, imported as ta* rather than class name)
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_colour_viridis_c() +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_colour_viridis_d() +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis() +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
coord_flip() +
facet_wrap(~Group)
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
#  coord_flip() +
facet_wrap(~Group)
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
#  coord_flip() +
facet_wrap(~Group, ncol=1)
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
facet_wrap(~Group) +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
#  facet_wrap(~Group) +
coord_flip()
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
#  facet_wrap(~Group) +
coord_flip() +
labs(fill = "Resistance Class")
plot_bar(physeq, fill = "ta6") +
theme_classic() +
#  scale_y_log10() +
scale_fill_viridis_d() +
#  facet_wrap(~Group) +
coord_flip() +
labs(fill = "Resistance Class")
# plot (view TAX variables, imported as ta* rather than class name)
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_fill_viridis_d() +
#  facet_wrap(~Group) +
coord_flip() +
labs(fill = "Resistance Class")
# plot log transformed
plot_bar(physeq, fill = "ta6") +
theme_classic() +
scale_y_log10() +
scale_fill_viridis_d() +
#  facet_wrap(~Group) +
coord_flip() +
labs(fill = "Resistance Class")
devtools::document()
library(MEP)
bracken_clean()
library(tidyverse)
bracken_clean()
p_f <- read_delim(paste0(bracken_path, "PREMIX_F_bracken.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
p_f <- read_delim(paste0(bracken_path, "PREMIX_F_bracken.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
bracken_path="/Users/NewNasty/Documents/Medical/Research/MEP/Projects/PREMIX/Sequencing/MG/Bracken/20.12.23 - Bracken Summaries/"
p_f <- read_delim(paste0(bracken_path, "PREMIX_F_bracken.tsv"), "\t", escape_double = FALSE, trim_ws = TRUE)
p_f %>% bracken_clean()
devtools::document()
p_f %>% bracken_clean()
test <- p_f %>% bracken_clean()
View(test)
devtools::document()
devtools::document()
update.packages("roxygen2")
devtools::document()
bracken_clean <- function(data, min_abund=0.01, frac_or_num="_frac"){
# select just taxonomy fraction and taxon name columns
Slim_Data <- data %>%
select(-c(taxonomy_id, taxonomy_lvl)) %>%
select(-matches("_num"))
# filter taxa by minimum abundance & trim "_frac" suffix
if(frac_or_reads=="_frac"){
Slim_above_min_abundance <- Slim_Data %>%
filter_at(vars(ends_with("_frac")), any_vars(. >= min_abund)) %>%  #<----- minimum abundance to adjust
column_to_rownames(var="name") %>%
rename_at(.vars = vars(ends_with("_frac")),
.funs = funs(sub("_frac$", "", .)))
}
if(frac_or_reads=="_num"){
Slim_above_min_abundance <- Slim_Data %>%
filter_at(vars(ends_with("_num")), any_vars(. >= min_abund)) %>%  #<----- minimum abundance to adjust
column_to_rownames(var="name") %>%
rename_at(.vars = vars(ends_with("_num")),
.funs = funs(sub("_num$", "", .)))
}
# return filtered data frame
return(Slim_above_min_abundance)
}
